package net.juststock.trading.controller;

import net.juststock.trading.domain.admin.AdminSignalMessage;
import net.juststock.trading.domain.common.InstrumentType;
import net.juststock.trading.domain.user.UserProfile;
import net.juststock.trading.dto.AdminSignalMessageDTO;
import net.juststock.trading.domain.market.UserSignalHistory;
import net.juststock.trading.service.interfaces.AdminSignalMessageService;
import net.juststock.trading.service.interfaces.NotificationService;
import net.juststock.trading.service.interfaces.UserProfileService;
import net.juststock.trading.repository.UserSignalHistoryRepository;
import net.juststock.trading.repository.AdminSignalMessageRepository;
import net.juststock.trading.domain.admin.AdminProfile;
import net.juststock.trading.domain.admin.AdminSignalHistory;
import net.juststock.trading.repository.AdminSignalHistoryRepository;
import net.juststock.trading.repository.AdminProfileRepository;
import net.juststock.trading.repository.UserProfileRepository;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.security.core.Authentication;

import java.util.List;
import java.util.Map;
import java.time.ZonedDateTime;

@RestController
@RequestMapping("/api/adminmessage/messages")
public class AdminSignalMessageController {

    private final AdminSignalMessageService adminService;
    private final UserProfileService profileService;
    private final NotificationService notificationService;
    private final UserSignalHistoryRepository historyRepository;
    private final AdminSignalMessageRepository adminMessageRepository;
    private final AdminSignalHistoryRepository adminHistoryRepository;
    private final UserProfileRepository userProfileRepository;
    private final AdminProfileRepository adminProfileRepository;

    public AdminSignalMessageController(AdminSignalMessageService adminService, UserProfileService profileService,
                                        NotificationService notificationService, UserSignalHistoryRepository historyRepository,
                                        AdminSignalMessageRepository adminMessageRepository, AdminSignalHistoryRepository adminHistoryRepository,
                                        UserProfileRepository userProfileRepository, AdminProfileRepository adminProfileRepository) {
        this.adminService = adminService;
        this.notificationService = notificationService;
        this.profileService = profileService;
        this.historyRepository = historyRepository;
        this.adminMessageRepository = adminMessageRepository;
        this.adminHistoryRepository = adminHistoryRepository;
        this.userProfileRepository = userProfileRepository;
        this.adminProfileRepository = adminProfileRepository;
    }

    // ðŸ”¹ Create a new admin signal message
    @PostMapping
    public ResponseEntity<?> createMessage(@RequestBody AdminSignalMessageDTO dto,
                                           Authentication authentication) {

        // Determine the admin creating this message.
        // If authenticated as admin, use that; otherwise, fall back to any existing admin.
        AdminProfile adminUser = null;
        if (authentication != null && authentication.getPrincipal() instanceof AdminProfile ap) {
            adminUser = ap;
        }
        if (adminUser == null) {
            adminUser = adminProfileRepository.findAll().stream().findFirst().orElse(null);
        }
        if (adminUser == null) {
            return ResponseEntity.status(400).body(Map.of("error", "No admin available to attribute the message"));
        }

        // Map DTO -> Entity
        AdminSignalMessage message = new AdminSignalMessage();
        message.setCreatedBy(adminUser);
        message.setCreatedAt(ZonedDateTime.now());
        message.setMessage(dto.getMessage());

        // Map instrument string to enum
        try {
            message.setInstrumentType(InstrumentType.valueOf(dto.getInstrument().toUpperCase()));
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().body(Map.of(
                "error", "Invalid instrument type"
            ));
        }

        // No signal type handling (removed)

        // Save message
        AdminSignalMessage saved = adminService.save(message);

        // Notify all users & save user-side history
        List<UserProfile> users = profileService.getAllUsers();
        int recipientCount = 0;

        for (UserProfile user : users) {
            notificationService.sendNotification(user, saved.getInstrumentType(), saved.getMessage());

            UserSignalHistory userHistory = new UserSignalHistory();
            userHistory.setUserProfile(user);
            userHistory.setAdminMessage(saved);
            userHistory.setInstrumentType(saved.getInstrumentType());
            userHistory.setMessage(saved.getMessage());
            userHistory.setCreatedAt(ZonedDateTime.now());

            historyRepository.save(userHistory);
            recipientCount++;
        }

        // Save admin-side history
        AdminSignalHistory adminHistory = new AdminSignalHistory();
        adminHistory.setAdmin(adminUser);
        adminHistory.setAdminMessage(saved);
        adminHistory.setInstrumentType(saved.getInstrumentType());
        adminHistory.setMessage(saved.getMessage());
        adminHistory.setRecipientCount(recipientCount);
        adminHistory.setCreatedAt(ZonedDateTime.now());

        adminHistoryRepository.save(adminHistory);

        return ResponseEntity.status(201).body(saved);
    }

    // ðŸ”¹ Get all messages for a given instrument type
    @GetMapping("/instrument/{instrumentType}")
    public ResponseEntity<List<AdminSignalMessage>> getByInstrument(@PathVariable InstrumentType instrumentType) {
        return ResponseEntity.ok(adminService.getByInstrument(instrumentType));
    }

    // ðŸ”¹ Get user-wise signal history
    @GetMapping("/history/user/{userId}")
    public ResponseEntity<List<UserSignalHistory>> getHistoryByUser(@PathVariable Long userId) {
        return ResponseEntity.ok(historyRepository.findByUserProfile_IdOrderByCreatedAtDesc(userId));
    }

    // ðŸ”¹ Get history for a specific admin message
    @GetMapping("/history/message/{messageId}")
    public ResponseEntity<List<UserSignalHistory>> getHistoryByAdminMessage(@PathVariable Long messageId) {
        return ResponseEntity.ok(historyRepository.findByAdminMessage_IdOrderByCreatedAtDesc(messageId));
    }

    // ðŸ”¹ Get messages created by a specific admin
    @GetMapping("/admin/{adminUserId}")
    public ResponseEntity<List<AdminSignalMessage>> getMessagesByAdmin(@PathVariable Long adminUserId) {
        return ResponseEntity.ok(adminMessageRepository.findByCreatedBy_IdOrderByCreatedAtDesc(adminUserId));
    }
}
